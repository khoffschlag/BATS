Binary Conversion
-----------------

You want to convert a decimal number like 42 to binary? If you don't know how to do this, then you came to the right place!
We will teach you this based on the knowledge provided by the book "Digital Design and Computer Architecture" from David and Sarah Harris!

Start dividing the decimal number by 2. The remainder will be the most-right bit! Remove any decimal places from the division result and start the next division by 2. Next remainder will be the bit on the left next to the most-right bit.
We continue this process of dividing by 2, saving the remainder to the left of our current binary number and removing the decimal places of the division result until we try to divide 0 by 2.

Example: Conversion of 17

Iteration 1: 17 / 2 = 8.5 with remainder 1
Iteration 2: 8 / 2 = 4 with remainder 0
Iteration 3: 4 / 2 = 2 with remainder 0
Iteration 4: 2 / 2 = 1 with remainder 0
Iteration 5: 1 / 2 = 0 with remainder 1
Iteration 6: 0 / 2 --> We can stop!

Our binary number is 10001. The most-left 1 comes from the last iteration, whereas the most-right 1 comes from the first iteration!

Acknowledgements: Harris, D. M., & Harris, S. L. (2019). Digital Design and Computer Architecture. 3rd ed. Amsterdam: Morgan Kaufmann Publishers.


Decimal Conversion
-----------------

Converting a binary number like 10011 is a problem for you?
Not anymore, because we are going to teach you how to convert a binary number to decimal based on the book "Digital Design and Computer Architecture" from David and Sarah Harris!

A binary number consists of two digits: 0 and 1. We call each digit of a binary number a bit.
Every bit encodes a power of 2, whereas the most right bit encodes the power of 2 to 0 and with each digit to the left the power of 2 increases by 1.

d = ... a2 * 2^1 + a1 * 2^0

In order to convert a binary number to decimal, you add each bit's value with the corresponding power of 2.

If you want to convert 10011 to decimal, you can calculate: 1 * 2^0 + 1 * 2^1 + 0 * 2^2 + 0 * 2^3 + 1 * 2^4 = 19.
Here we calculated from the right to the left, but the other way around is also fine! In this case make sure to start with the power of 2 to 4 and decrease with every following step!
Now we know that our binary number 10011 is the decimal number 19.

Acknowledgements: Harris, D. M., & Harris, S. L. (2019). Digital Design and Computer Architecture. 3rd ed. Amsterdam: Morgan Kaufmann Publishers.


Logical Operations
-----------------

xor sounds like a foreign language to you? You don't know the result of two binary numbers combined by & (and) or | (or).
Based on the knowledge of the book "Digital Design and Computer Architecture" from David and Sarah Harris we will change that!


&, | and xor are logical operations that can be seen as circuits that take two inputs (i.e., two bits) and produce as result based of these two bits.

& stands for the 'logical and'. It takes two bits a and b and returns only 1, if a AND b are both 1.

0 & 0 = 0
0 & 1 = 0
1 & 0 = 0
1 & 1 = 0

| stands for the 'logical or'. It takes two bits a and b and returns 1, if at least one of the bits is 1.

0 | 0 = 0
0 | 1 = 1
1 | 0 = 1
1 | 1 = 1

xor stands for 'exclusive or'. It takes two bits a and b and returns 1, only in cases where only 1 of the boths bits are 1.

0 xor 0 = 0
0 xor 1 = 1
1 xor 0 = 1
1 xor 1 = 0

If a binary number consists of multiple bits, we apply the mentioned operations to each pair of bits!

Example #1

101 & 111 = 101
001 | 110 = 111
010 xor 111 = 101


Acknowledgements: Harris, D. M., & Harris, S. L. (2019). Digital Design and Computer Architecture. 3rd ed. Amsterdam: Morgan Kaufmann Publishers.
